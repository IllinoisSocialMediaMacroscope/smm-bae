var express = require('express');
var router = express.Router();
var resultUser = require('./result-president-trump-tweets.json');
var resultBrand = require('./result-profile.json');
var config = require('../config');

var path = require('path');
var appPath = path.dirname(__dirname);
var lambda_invoke = require(path.join(appPath,'scripts','helper_func','lambdaHelper.js'));
var s3_helper = require(path.join(appPath, 'scripts','helper_func', 's3Helper.js'));

router.get('/', function(req, res, next){
    res.render('index',{});
});

// router.get('/sunburst', function(req, res, next){
//     res.render('sunburst', {personality:resultUser,
//         profile_img:"https://pbs.twimg.com/profile_images/874276197357596672/kUuht00m_400x400.jpg"});
// });

router.post('/update', function(req, res, next){

    getTimeline(req.body.sessionID, req.body.user_screen_name).then(results =>{
        console.log(results);
        //resolve(results);
    }).catch( err =>{
        console.log(err);
        //reject(err);
    });

    // var promises = [];
    //
    // promises.push(new Promise(function(resolve, reject){
    //     getTimeline(req.body.sessionID, req.body.user_screen_name).then(results =>{
    //         console.log(results);
    //         resolve(results);
    //     }).catch( err =>{
    //         console.log(err);
    //         reject(err);
    //     });
    // }));
    // promises.push(new Promise(function(resolve, reject){
    //     getTimeline(req.body.sessionID, req.body.brand_screen_name).then(results =>{
    //         console.log(results);
    //         resolve(results);
    //     }).catch( err =>{
    //         console.log(err);
    //         reject(err);
    //     });
    // }));
    //
    // Promise.all(promises).then( results => {
    //     console.log(results);
    // });
});

function getTimeline(sessionID, screen_name){

    lambda_invoke('bae_check_screen_name', {
            consumer_key: config.twitter.consumer_key,
            consumer_secret: config.twitter.consumer_secret,
            access_token: config.twitter.access_token,
            access_token_secret: config.twitter.access_token_secret,
            screen_name:screen_name })
        .then( result => {
            if (result['user_exist']) {
                return true;
            }
            else {
                return false;
            }
        }).then( user_exist =>{
            if (user_exist){
                s3_helper.list_files(sessionID +'/' + screen_name).then( result => {
                    var files = Object.keys(result);
                    if (files.indexOf(screen_name + '_tweets.txt') > -1) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }).then( file_exist =>{
                    if (file_exist){
                        return {message: 'already collected!'}
                    }
                    else{
                        lambda_invoke('bae_collect_timeline', {
                            sessionID: sessionID,
                            consumer_key: config.twitter.consumer_key,
                            consumer_secret: config.twitter.consumer_secret,
                            access_token: config.twitter.access_token,
                            access_token_secret: config.twitter.access_token_secret,
                            screen_name:screen_name
                        }).then( result => {
                            return result;
                        }).catch( err => {
                            return err;
                        })
                    }
                }).catch( err => {
                    console.log(err);
                    return false;
                })
            }
        })
        .catch( err => {
            console.log(err);
            return false;
        });
}

module.exports = router;
